From 9f8b1e9d300ba8b4fb2e7857382b8eefbca4b3fd Mon Sep 17 00:00:00 2001
From: Ryan Gonzalez <rymg19@gmail.com>
Date: Thu, 15 Apr 2021 13:23:02 -0500
Subject: [PATCH 26/26] Revert "Reland "Add [[clang::nomerge]] attribute to
 ~CheckError().""

This reverts commit 9909f146b28d56c9c0411329a056ed959b33f76a *and*
the TRIVIAL_ABI addition.
---
 base/check.h             |  2 +-
 base/compiler_specific.h | 32 --------------------------------
 2 files changed, 1 insertion(+), 33 deletions(-)

diff --git a/base/check.h b/base/check.h
index 17048e45539db..c94ab68db9087 100644
--- a/base/check.h
+++ b/base/check.h
@@ -85,7 +85,7 @@ class BASE_EXPORT CheckError {
   // Stream for adding optional details to the error message.
   std::ostream& stream();
 
-  NOMERGE ~CheckError();
+  ~CheckError();
 
   CheckError(const CheckError& other) = delete;
   CheckError& operator=(const CheckError& other) = delete;
diff --git a/base/compiler_specific.h b/base/compiler_specific.h
index 6693e9ea33e93..3275056cfd043 100644
--- a/base/compiler_specific.h
+++ b/base/compiler_specific.h
@@ -339,38 +339,6 @@ inline constexpr bool AnalyzerAssumeTrue(bool arg) {
 
 #endif  // defined(__clang_analyzer__)
 
-// Use nomerge attribute to disable optimization of merging multiple same calls.
-#if defined(__clang__) && __has_attribute(nomerge)
-#define NOMERGE [[clang::nomerge]]
-#else
 #define NOMERGE
-#endif
-
-// Marks a type as being eligible for the "trivial" ABI despite having a
-// non-trivial destructor or copy/move constructor. Such types can be relocated
-// after construction by simply copying their memory, which makes them eligible
-// to be passed in registers. The canonical example is std::unique_ptr.
-//
-// Use with caution; this has some subtle effects on constructor/destructor
-// ordering and will be very incorrect if the type relies on its address
-// remaining constant. When used as a function argument (by value), the value
-// may be constructed in the caller's stack frame, passed in a register, and
-// then used and destructed in the callee's stack frame. A similar thing can
-// occur when values are returned.
-//
-// TRIVIAL_ABI is not needed for types which have a trivial destructor and
-// copy/move constructors, such as base::TimeTicks and other POD.
-//
-// It is also not likely to be effective on types too large to be passed in one
-// or two registers on typical target ABIs.
-//
-// See also:
-//   https://clang.llvm.org/docs/AttributeReference.html#trivial-abi
-//   https://libcxx.llvm.org/docs/DesignDocs/UniquePtrTrivialAbi.html
-#if defined(__clang__) && __has_attribute(trivial_abi)
-#define TRIVIAL_ABI [[clang::trivial_abi]]
-#else
 #define TRIVIAL_ABI
-#endif
-
 #endif  // BASE_COMPILER_SPECIFIC_H_
-- 
2.31.1

