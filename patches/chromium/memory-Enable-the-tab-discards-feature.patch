From 27966561167da02d8a432dcaf9c55867721f2838 Mon Sep 17 00:00:00 2001
From: Mario Sanchez Prada <mario@endlessm.com>
Date: Thu, 28 Jan 2016 13:53:08 +0000
Subject: [PATCH] memory: Enable the tab discards feature

This allows manually discarding tabs from chrome://discards as well
as automatic tab discards once a certain level of "memory pressure"
is reached.
---
 chrome/browser/resource_coordinator/tab_manager.cc | 12 +++++++-----
 chrome/browser/resource_coordinator/tab_manager.h  |  6 +++---
 2 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/chrome/browser/resource_coordinator/tab_manager.cc b/chrome/browser/resource_coordinator/tab_manager.cc
index 8915c5c3b1076..2a9eb50ecf4a7 100644
--- a/chrome/browser/resource_coordinator/tab_manager.cc
+++ b/chrome/browser/resource_coordinator/tab_manager.cc
@@ -141,7 +141,9 @@ void TabManager::Start() {
   // handled by Performance Manager.
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   delegate_->StartPeriodicOOMScoreUpdate();
+#endif
 
+#if BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_LINUX)
   // Create a |MemoryPressureListener| to listen for memory events when
   // MemoryCoordinator is disabled. When MemoryCoordinator is enabled
   // it asks TabManager to do tab discarding.
@@ -154,7 +156,7 @@ void TabManager::Start() {
       OnMemoryPressure(level);
     }
   }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
+#endif  // BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_LINUX)
 
   // Create the graph observer. This is the source of page almost idle data and
   // EQT measurements.
@@ -213,7 +215,6 @@ WebContents* TabManager::DiscardTabByExtension(content::WebContents* contents) {
   return DiscardTabImpl(LifecycleUnitDiscardReason::EXTERNAL);
 }
 
-#if BUILDFLAG(IS_CHROMEOS_ASH)
 void TabManager::DiscardTabFromMemoryPressure() {
   // Output a log with per-process memory usage and number of file descriptors,
   // as well as GPU memory details. Discard happens without waiting for the log
@@ -224,6 +225,7 @@ void TabManager::DiscardTabFromMemoryPressure() {
   // (https://crbug.com/1040522).
   memory::OomMemoryDetails::Log("Tab Discards Memory details");
 
+#if BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_LINUX)
   // Start handling memory pressure. Suppress further notifications before
   // completion in case a slow handler queues up multiple dispatches of this
   // method and inadvertently discards more than necessary tabs/apps in a burst.
@@ -232,8 +234,8 @@ void TabManager::DiscardTabFromMemoryPressure() {
   TabDiscardDoneCB tab_discard_done(base::BindOnce(
       &TabManager::OnTabDiscardDone, weak_ptr_factory_.GetWeakPtr()));
   DiscardTab(LifecycleUnitDiscardReason::URGENT, std::move(tab_discard_done));
+#endif  // BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_LINUX)
 }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
 
 void TabManager::AddObserver(TabLifecycleObserver* observer) {
   TabLifecycleUnitExternal::AddTabLifecycleObserver(observer);
@@ -280,7 +282,7 @@ bool TabManager::IsInternalPage(const GURL& url) {
   return false;
 }
 
-#if BUILDFLAG(IS_CHROMEOS_ASH)
+#if BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_LINUX)
 void TabManager::OnMemoryPressure(
     base::MemoryPressureListener::MemoryPressureLevel memory_pressure_level) {
   // If Chrome is shutting down, do not do anything.
@@ -324,7 +326,7 @@ void TabManager::UnregisterMemoryPressureListener() {
   // Destroying the memory pressure listener to unregister from the observer.
   memory_pressure_listener_.reset();
 }
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
+#endif  // BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_LINUX)
 
 void TabManager::OnActiveTabChanged(content::WebContents* old_contents,
                                     content::WebContents* new_contents) {
diff --git a/chrome/browser/resource_coordinator/tab_manager.h b/chrome/browser/resource_coordinator/tab_manager.h
index 098a2063400f0..bff4bb5e34a9b 100644
--- a/chrome/browser/resource_coordinator/tab_manager.h
+++ b/chrome/browser/resource_coordinator/tab_manager.h
@@ -99,7 +99,7 @@ class TabManager : public LifecycleUnitObserver,
   // was discarded.
   content::WebContents* DiscardTabByExtension(content::WebContents* contents);
 
-#if BUILDFLAG(IS_CHROMEOS_ASH)
+#if BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_LINUX)
   // Discards a tab in response to memory pressure.
   void DiscardTabFromMemoryPressure();
 #endif
@@ -169,7 +169,7 @@ class TabManager : public LifecycleUnitObserver,
   // can be easily reloaded and hence makes a good choice to discard.
   static bool IsInternalPage(const GURL& url);
 
-#if BUILDFLAG(IS_CHROMEOS_ASH)
+#if BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_LINUX)
   // Called by the memory pressure listener when the memory pressure rises.
   void OnMemoryPressure(
       base::MemoryPressureListener::MemoryPressureLevel memory_pressure_level);
@@ -184,7 +184,7 @@ class TabManager : public LifecycleUnitObserver,
   // Unregister to stop listening to memory pressure. Called on shutdown or
   // beginning of tab discards.
   void UnregisterMemoryPressureListener();
-#endif  // BUILDFLAG(IS_CHROMEOS_ASH)
+#endif  // BUILDFLAG(IS_CHROMEOS_ASH) || BUILDFLAG(IS_LINUX)
 
   // Called by OnTabStripModelChanged()
   void OnActiveTabChanged(content::WebContents* old_contents,
-- 
2.39.0

