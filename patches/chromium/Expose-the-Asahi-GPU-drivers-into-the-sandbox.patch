From d5e4382dbe0eec7338fa46101297fc241c2c8baa Mon Sep 17 00:00:00 2001
From: Ryan Gonzalez <rymg19@gmail.com>
Date: Tue, 3 Jan 2023 23:16:12 +0000
Subject: [PATCH] Expose the Asahi GPU drivers into the sandbox

On Asahi Linux, Mesa initially loads apple_drv.so, but asahi_drv.so is
loaded afterwards and is needed for hardware acceleration to work.

Bug: None
Change-Id: Ia2dbb558cf5c612bbc4aed6c531b917b84dc6e05
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4119913
Reviewed-by: Kenneth Russell <kbr@chromium.org>
Reviewed-by: Matthew Denton <mpdenton@chromium.org>
Commit-Queue: Matthew Denton <mpdenton@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1088441}
---
 content/gpu/gpu_main.cc                       | 10 ++++++++++
 content/gpu/gpu_sandbox_hook_linux.cc         | 20 ++++++++++++++++---
 .../policy/linux/sandbox_seccomp_bpf_linux.h  |  1 +
 3 files changed, 28 insertions(+), 3 deletions(-)

diff --git a/content/gpu/gpu_main.cc b/content/gpu/gpu_main.cc
index 0aac97f658748..eec33f4071022 100644
--- a/content/gpu/gpu_main.cc
+++ b/content/gpu/gpu_main.cc
@@ -403,6 +403,12 @@ int GpuMain(MainFunctionParams parameters) {
 namespace {
 
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+bool IsAsahiGpu(const gpu::GPUInfo::GPUDevice& device) {
+  // Asahi's vendor ID is a stub value (0xffffffff), so match the vendor name
+  // instead.
+  return device.vendor_string.find("Asahi") != std::string::npos;
+}
+
 bool StartSandboxLinux(gpu::GpuWatchdogThread* watchdog_thread,
                        const gpu::GPUInfo* gpu_info,
                        const gpu::GpuPreferences& gpu_prefs) {
@@ -426,6 +432,8 @@ bool StartSandboxLinux(gpu::GpuWatchdogThread* watchdog_thread,
         angle::IsIntel(gpu_info->active_gpu().vendor_id);
     sandbox_options.use_nvidia_specific_policies =
         angle::IsNVIDIA(gpu_info->active_gpu().vendor_id);
+    sandbox_options.use_asahi_specific_policies =
+        IsAsahiGpu(gpu_info->active_gpu());
     for (const auto& gpu : gpu_info->secondary_gpus) {
       if (angle::IsAMD(gpu.vendor_id))
         sandbox_options.use_amd_specific_policies = true;
@@ -433,6 +441,8 @@ bool StartSandboxLinux(gpu::GpuWatchdogThread* watchdog_thread,
         sandbox_options.use_intel_specific_policies = true;
       else if (angle::IsNVIDIA(gpu.vendor_id))
         sandbox_options.use_nvidia_specific_policies = true;
+      else if (IsAsahiGpu(gpu))
+        sandbox_options.use_asahi_specific_policies = true;
     }
   }
   sandbox_options.accelerated_video_decode_enabled =
diff --git a/content/gpu/gpu_sandbox_hook_linux.cc b/content/gpu/gpu_sandbox_hook_linux.cc
index ce5339501804d..0391df5d14600 100644
--- a/content/gpu/gpu_sandbox_hook_linux.cc
+++ b/content/gpu/gpu_sandbox_hook_linux.cc
@@ -360,12 +360,21 @@ void AddVulkanICDPermissions(std::vector<BrokerFilePermission>* permissions) {
   }
 }
 
-void AddStandardGpuPermissions(std::vector<BrokerFilePermission>* permissions) {
+void AddStandardGpuPermissions(
+    std::vector<BrokerFilePermission>* permissions,
+    const sandbox::policy::SandboxSeccompBPF::Options& options) {
   static const char kDriCardBasePath[] = "/dev/dri/card";
   static const char kNvidiaCtlPath[] = "/dev/nvidiactl";
   static const char kNvidiaDeviceBasePath[] = "/dev/nvidia";
   static const char kNvidiaDeviceModeSetPath[] = "/dev/nvidia-modeset";
   static const char kNvidiaParamsPath[] = "/proc/driver/nvidia/params";
+  static const char kAsahiDri[] =
+#if defined(DRI_DRIVER_DIR)
+      DRI_DRIVER_DIR "/asahi_dri.so"
+#else
+      "/usr/lib64/dri/asahi_dri.so"
+#endif
+      ;
   static const char kDevShm[] = "/dev/shm/";
 
   // For shared memory.
@@ -397,6 +406,11 @@ void AddStandardGpuPermissions(std::vector<BrokerFilePermission>* permissions) {
       permissions->push_back(BrokerFilePermission::ReadOnly(sw_path));
     }
   }
+
+  // For Asahi drivers.
+  if (options.use_asahi_specific_policies) {
+    permissions->push_back(BrokerFilePermission::ReadOnly(kAsahiDri));
+  }
 }
 
 std::vector<BrokerFilePermission> FilePermissionsForGpu(
@@ -427,7 +441,7 @@ std::vector<BrokerFilePermission> FilePermissionsForGpu(
       AddIntelGpuPermissions(&permissions);
     }
     if (options.use_nvidia_specific_policies) {
-      AddStandardGpuPermissions(&permissions);
+      AddStandardGpuPermissions(&permissions, options);
     }
     return permissions;
   }
@@ -442,7 +456,7 @@ std::vector<BrokerFilePermission> FilePermissionsForGpu(
     }
   }
 
-  AddStandardGpuPermissions(&permissions);
+  AddStandardGpuPermissions(&permissions, options);
   return permissions;
 }
 
diff --git a/sandbox/policy/linux/sandbox_seccomp_bpf_linux.h b/sandbox/policy/linux/sandbox_seccomp_bpf_linux.h
index 11b965d2cbe30..91fdc53cf0c2f 100644
--- a/sandbox/policy/linux/sandbox_seccomp_bpf_linux.h
+++ b/sandbox/policy/linux/sandbox_seccomp_bpf_linux.h
@@ -28,6 +28,7 @@ class SANDBOX_POLICY_EXPORT SandboxSeccompBPF {
     bool use_amd_specific_policies = false;     // For ChromiumOS.
     bool use_intel_specific_policies = false;   // For ChromiumOS.
     bool use_nvidia_specific_policies = false;  // For Linux.
+    bool use_asahi_specific_policies = false;   // For Linux.
 
     // Options for GPU's PreSandboxHook.
     bool accelerated_video_decode_enabled = false;
-- 
2.38.1

